#include<iostream>
#include <iomanip>

using namespace std;

class ListNode
{
public:
	int element;
	ListNode *next;
	ListNode(int x) : element(x), next(NULL) {};
	//friend class List;
};

class List
{
	//private:
	//	ListNode *Header;
public:
	ListNode *Header;

	List();                     //same as list_node , surprise
	List(const List &rhs);
	~List();
	bool is_empty() const;
	int size() const;
	void insert(const int location, const int x);
	int get(const int location) const;
	void set(const int location, const int x);
	void remove(const int location);
	int find(const int x) const;
	void make_empty();
	void operator=(const List &rhs);
	void printList(List *li, const int listsize) const;
	ListNode* mergeTwoLists(ListNode *a, ListNode *b);
	ListNode* swapPairs(ListNode *head);
};

List::List() {
	Header = new ListNode(-1);
}

List::List(const List &rhs)
{
	if (rhs.Header == NULL)
	{
		this->Header = NULL;
	}
	else
	{
		*this = rhs;
	}
}

void List::operator=(const List &rhs)
{
	if (this == &rhs)
		return;
	if (rhs.Header == NULL)
	{
		return;
	}
	make_empty();
	int size_rhs = rhs.size();
	ListNode *ptr = rhs.Header->next;
	for (int i = 0; i < size_rhs; i++)
	{
		insert(i, ptr->element);
		ptr = ptr->next;
	}
}

List::~List()
{
	ListNode *itr = Header;
	while (itr != NULL)
	{
		ListNode *ptrTemp = itr;
		itr = itr->next;
		delete ptrTemp;
		ptrTemp = NULL;
	}
	cout << "destruct !" << static_cast<const void*> (Header) << endl;
	Header = NULL;   //delete header
}

/*
List::~List()
{
make_empty();
delete Header;
}
*/

bool List::is_empty() const {
	if (Header->next == NULL)
		return true;
	return false;
}

int List::size() const {
	int count = 0;
	ListNode *itr = Header->next;
	while (itr)
	{
		itr = itr->next;
		count++;
	}
	return count;
}

void List::insert(const int location, const int x) {
	ListNode *insertNode = new ListNode(x);
	if (location < 0)
		return;
	ListNode *itr = Header;
	int i = 0;
	while (itr && i < location)
	{
		itr = itr->next;
		i++;
	}
	if (!itr)
		return;
	insertNode->next = itr->next;
	itr->next = insertNode;
}

int List::get(const int location) const{
	if (location < 0)
		throw new exception();
	ListNode *itr = Header;
	int i = 0;
	while (itr && i < location)
	{
		itr = itr->next;
		i++;
	}
	if (!itr)
		throw new exception();
	return itr->element;
}

void List::set(const int location, const int x) {
	if (location < 0)
		throw new exception();
	ListNode *itr = Header;
	int i = 0;
	while (itr && i < location)
	{
		itr = itr->next;
		i++;
	}
	if (!itr)
		throw new exception();
	itr->element = x;
}

void List::remove(const int location) {
	if (location < 0)
		throw new exception();
	ListNode *itr = Header;
	int i = 0;
	while (itr && i < location)
	{
		itr = itr->next;
		i++;
	}
	if (!itr)
		throw new exception();
	ListNode *Temp = itr->next;
	itr->next = Temp->next;   //ptr->next = ptr->next->next
	delete Temp;
}

int List::find(const int x) const {
	int count = 0;
	if (Header->next == NULL)
		return -1;
	ListNode *itr = Header->next;
	while (itr)
	{
		if (itr->element == x)
		{
			return count;
		}
		itr = itr->next;
		count++;
	}
	if (!itr)
		return -1;
	return -1;
}

void List::make_empty() {
	while (!is_empty())
	{
		remove(0);
	}
}

void List::printList(List *li, const int listsize) const{
	cout << "The nodes value of this linked list are: " << endl;
	for (int i = 1; i <= listsize; i++)
	{
		cout << setw(6) << li->get(i);
	}
	cout << endl;
}

ListNode* List::mergeTwoLists(ListNode *l1, ListNode *l2) {
	ListNode *res = NULL;
	if (l1 == NULL)
		return l2;
	if (l2 == NULL)
		return l1;
	if (l1->element <= l2->element)
	{
		res = l1;
		res->next = mergeTwoLists(l1->next, l2);
	}
	else
	{
		res = l2;
		res->next = mergeTwoLists(l1, l2->next);
	}
	return res;
}

ListNode* List::swapPairs(ListNode *head) {
	if (head == NULL || head->next == NULL)
		return head;

	ListNode *res = NULL;
	ListNode *tmp = new ListNode(-1);
	ListNode *tmp2 = new ListNode(-2);
	tmp->next = head->next;
	tmp2->next = head->next->next;
	head->next->next = head;
	head->next = swapPairs(tmp2->next);

	return tmp->next;
}

void main()
{
	List l1, l2, res;
	//l1.insert(0, 1);
	//l1.insert(1, 2);

	//l1.insert(2, 3);
	//l1.insert(3, 4);
	//l1.insert(4, 5);
	//l1.insert(5, 6);

	l2.insert(0, 0);
	l2.insert(1, 3);
	//l2.insert(2, 3);
	//l2.insert(3, 5);

	l1.printList(&l1, l1.size());
	//l2.printList(&l2, l2.size());
	res.Header->next = res.swapPairs(l1.Header->next);
	res.printList(&res, res.size());
	//res.Header->next = res.mergeTwoLists(l1.Header->next, l2.Header->next);
	//res.printList(&res, res.size());
	getchar();
}
