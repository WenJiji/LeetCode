class Solution {
public:
    bool isIsomorphic(string s, string t) {
		if (s.size() != t.size())
			return false;
		unordered_map<char, int> map1;
		unordered_map<char, int> map2;
		pair<unordered_map<char, int>::iterator, int> p1, p2;

		for (int i = 0; i < s.size(); i++)
		{
			p1 = map1.insert(unordered_map<char, int>::value_type(s.at(i), i));
			p2 = map2.insert(unordered_map<char, int>::value_type(t.at(i), i));
			if (p1.second && p2.second)
				continue;
			else if (p1.second && !p2.second)
				return false;
			else if (!p1.second && p2.second)
				return false;
			else
			{
				if (p1.first->second != p2.first->second)
					return false;
			}
		}
		return true;        
    }
};
