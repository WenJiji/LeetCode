class Solution {
public:
	int totalHammingDistance(vector<int>& nums) {
		vector<bitset<32>> v;
		int count[32] = { 0 };
		int res = 0;
		int size = nums.size();
		for (auto i : nums) {
			v.push_back(bitset<32>(i));
		}
		for (int i = 0; i < nums.size(); i++)
		{
			for (int j = 0; j < 32; j++)
			{
				if (v[i][j] == 1)
					count[j]++;
			}
		}
		for (int i = 0; i < 32; i++)
		{
			res += count[i] * (size - count[i]);
		}
		return res;
	}
};

//more efficient
//class Solution {
//public:
//	int totalHammingDistance(vector<int>& nums) {
//		int total = 0, n = nums.size();
//		for (int j = 0; j<32; j++) {
//			int bitCount = 0;
//			for (int i = 0; i<n; i++)
//				bitCount += (nums[i] >> j) & 1;
//			total += bitCount*(n - bitCount);
//		}
//		return total;
//	}
//};
