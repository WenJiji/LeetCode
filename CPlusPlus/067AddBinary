class Solution {
public:
    string addBinary(string a, string b) {
		string ret;
		if (a == "" && b == "")
			return ret = "";
		else if (a == "" && b != "")
			return ret = b;
		else if (a != "" && b == "")
			return ret = a;
		int sizeA = a.size();
		int sizeB = b.size();
		int carryBit = 0;
		int shortLength = sizeA <= sizeB ? sizeA : sizeB;
		
		for (int i = 0; i <shortLength; i++)
		{
			if (a.at(sizeA - 1 - i) == '1' && b.at(sizeB - 1 - i) == '1' && carryBit == 0)
			{
				ret.insert(0, "0");
				carryBit = 1;
			}
			else if (a.at(sizeA - 1 - i) == '1' && b.at(sizeB - 1 - i) == '1' && carryBit == 1)
			{
				ret.insert(0, "1");
				carryBit = 1;
			}
			else if (a.at(sizeA - 1 - i) == '0' && b.at(sizeB - 1 - i) == '1' && carryBit == 0)
			{
				ret.insert(0, "1");
				carryBit = 0;
			}
			else if (a.at(sizeA - 1 - i) == '0' && b.at(sizeB - 1 - i) == '1' && carryBit == 1)
			{
				ret.insert(0, "0");
				carryBit = 1;
			}
			else if (a.at(sizeA - 1 - i) == '1' && b.at(sizeB - 1 - i) == '0' && carryBit == 0)
			{
				ret.insert(0, "1");
				carryBit = 0;
			}
			else if (a.at(sizeA - 1 - i) == '1' && b.at(sizeB - 1 - i) == '0' && carryBit == 1)
			{
				ret.insert(0, "0");
				carryBit = 1;
			}	
			else if (a.at(sizeA - 1 - i) == '0' && b.at(sizeB - 1 - i) == '0' && carryBit == 0)
			{
				ret.insert(0, "0");
				carryBit = 0;
			}
			else if (a.at(sizeA - 1 - i) == '0' && b.at(sizeB - 1 - i) == '0' && carryBit == 1)
			{
				ret.insert(0, "1");
				carryBit = 0;
			}
		}
		if (sizeA >= sizeB)
		{
			for (int i = 0; i < sizeA - shortLength; i++)
			{
				if (carryBit == 1)
				{
					if (a.at(sizeA - 1 - shortLength - i) == '1')
					{
						ret.insert(0, "0");
						carryBit = 1;
					}
					else
					{
						ret.insert(0, "1");
						carryBit = 0;
					}	
				}
				else if (carryBit == 0)
				{
					ret.insert(0, a, 0, sizeA - 1 - shortLength - i + 1);
					break;
				}
			}
			if (carryBit == 1)
				ret.insert(0, "1");
		}
		if (sizeB > sizeA)
		{
			for (int i = 0; i < sizeB - shortLength; i++)
			{
				if (carryBit == 1)
				{
					if (b.at(sizeB - 1 - shortLength - i) == '1')
					{
						ret.insert(0, "0");
						carryBit = 1;
					}
					else
					{
						ret.insert(0, "1");
						carryBit = 0;
					}
				}
				else if (carryBit == 0)
				{
					ret.insert(0, b, 0, sizeB - 1 - shortLength - i+1);
					break;
				}
			}
			if (carryBit == 1)
				ret.insert(0, "1");
		}
		return ret;  
    }
};
