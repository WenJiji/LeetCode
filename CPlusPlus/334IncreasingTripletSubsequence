class Solution {
public:
	bool increasingTriplet(vector<int>& nums) {
		vector<int> a;
		int tmp = INT_MAX;
		if (nums.size() < 3)
			return false;
		for (auto i : nums) {
			if (a.empty()) {
				tmp = i;
				a.push_back(i);
			}	
			else if (a.size() == 1) {
				if (i < a[0]) {
					a[0] = i;
					tmp = i;
				}	
				else if (i > a[0])
					a.push_back(i);
			}
			else if (a.size() == 2) {

				if (i < tmp)
					tmp = i;
				else if (i > a[1])
					return true;
				else if (i > tmp) {
					a[1] = i;
					a[0] = tmp;
 				}
			}
		}
		return false;
	}
};


//Better method

class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int c1 = INT_MAX, c2 = INT_MAX;
    for (int x : nums) {
        if (x <= c1) {
            c1 = x;           // c1 is min seen so far (it's a candidate for 1st element)
        } else if (x <= c2) { // here when x > c1, i.e. x might be either c2 or c3
            c2 = x;           // x is better than the current c2, store it
        } else {              // here when we have/had c1 < c2 already and x > c2
            return true;      // the increasing subsequence of 3 elements exists
        }
    }
    return false;
    }
};
