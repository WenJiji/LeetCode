class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
		int begin = -1;
		int end = -1;
		int tmpMax = -1;
		bool flag = false;
		for (int i = 0; i < nums.size()-1; i++)
		{
			if (nums[i] > nums[i + 1] && !flag)
			{
				flag = true;
				tmpMax = nums[i];
				for (int j = 0; j < i; j++)
				{
					if (nums[i + 1] < nums[j])
					{
						if (begin == -1)
							begin = j;
						else
							begin = min(begin,j);
                        break;
					}
				}
				if (begin == -1)
					begin = i;
				else 
					begin = min(begin, i);
				end = i + 1;
			}
			else if (nums[i] > nums[i + 1] && flag)
			{
				for (int j = 0; j < i; j++)
				{
					if (nums[i + 1] < nums[j])
					{
						begin = min(begin, j);
					}
				}
				end = i + 1;
			}
			else if (nums[i] <= nums[i + 1] && flag && nums[i+1] < tmpMax)
			{
				end = i + 1;
			}
			else if (nums[i] <= nums[i + 1] && flag)
			{
				flag = false;
			}
			else
				continue;
		}
		if (end == begin)
			return 0;
		else 
			return end - begin + 1;      
    }
};



//Method 2

class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        vector<int> sortArr = nums;
        sort(sortArr.begin(), sortArr.end());
        int start, end;
        for (start = 0; start < nums.size(); ++start) {
            if (nums[start] != sortArr[start])
                break;
        }
        for (end = nums.size() - 1; end >= 0; --end) {
            if (nums[end] != sortArr[end])
                break;
        }
        return start >= end ? 0 : end - start + 1;     
    }
};
