class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
		unordered_map<int, int> map;
		pair<unordered_map<int, int>::iterator, int> p;
		int gap = 0;
		for (int i = 0; i<nums.size(); i++) {
			p = map.insert(unordered_map<int, int>::value_type(nums.at(i), i));
			if (!p.second) {
				if (i - p.first->second <= k)
					return true;
				else
					p.first->second = i;
			}
		}
		return false;
    }
};



class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
		vector<int> a = nums;
		int m=0;
		int flag =0;
		sort(a.begin(),a.end());
		if (nums.size()==0)
		{
			return false;
		}
		for (int i=0; i<nums.size()-1;i++)
		{
			if (a[i]==a[i+1])
			{
				for (int j=0;j<nums.size();j++)
				{
					if (nums[j]==a[i])
					{
						if (flag==0)
						{
							m=j;
							flag=1;
						}
						else if (j-m>k)
						{
							m=j;
						}
						else if (j-m<=k)
						{
							return true;
						}
					}
					
				}
				m=0;
				flag=0;
			}
		}
		return false;
    }
};
